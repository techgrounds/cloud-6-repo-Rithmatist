from aws_cdk.aws_elasticloadbalancingv2 import SslPolicy
import aws_cdk.aws_elasticloadbalancingv2 as elbv2
import aws_acm_certified as acm
import aws_cdk as cdk
from constructs import Construct
from aws_cdk import (
    aws_autoscaling as autoscaling,
    aws_ec2 as ec2,
)


class LoadBalancer(cdk.NestedStack):
    def __init__(self, scope: Construct, id: str,
                 asg: autoscaling.AutoScalingGroup,
                 vpc: ec2.Vpc,
                 **kwargs) -> None:
        super().__init__(scope, id, **kwargs)

        environments = self.node.try_get_context("ENVIRONMENTS")
        lb_environment = environments.get("LoadBalancer")
        lb_name = lb_environment.get("name")
        lb_internet_facing = lb_environment.get("internet_facing")
        lb_listeners_name = lb_environment.get("listener_name")
        lb_listeners_port = lb_environment.get("listener_port")
        lb_redirect_source_port = lb_environment.get("redirect_source_port")
        lb_redirect_target_port = lb_environment.get("redirect_target_port")
        lb_target_name = lb_environment.get("target_name")
        lb_target_port = lb_environment.get("target_port")
        lb_cpu_utilization_name = lb_environment.get("cpu_utilization_name")
        lb_target_utilization_percent = lb_environment.get("target_utilization_percent")

        lb = elbv2.ApplicationLoadBalancer(
            self,
            lb_name,
            vpc=vpc,
            internet_facing=lb_internet_facing)

        # assign private self signed certificate to the load balancer that is generated by a custom function.

        listener_certificate = elbv2.ListenerCertificate.from_arn(acm.generated_certificate())

        # add listener to the load balancer.

        listener = lb.add_listener(
            lb_listeners_name,
            port=lb_listeners_port,
            certificates=[listener_certificate],
            ssl_policy=SslPolicy.RECOMMENDED
        )

        # add redirect to the load balancer.

        lb.add_redirect(
            source_port=lb_redirect_source_port,
            target_port=lb_redirect_target_port
        )

        # add target group to the load balancer.

        listener.add_targets(
            lb_target_name,
            port=lb_target_port,
            targets=[asg],

        )

        # add listener connections to the load balancer.

        listener.connections.allow_default_port_from_any_ipv4("Open to the world")

        # add scaling rule on cpu utilization.

        asg.scale_on_cpu_utilization(
            lb_cpu_utilization_name,
            target_utilization_percent=lb_target_utilization_percent
        )
